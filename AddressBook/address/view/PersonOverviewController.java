package address.view;

import database.DBConnection;
import database.DBoperation;

import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;


import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import address.model.Person;
import javafx.event.ActionEvent;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Label;

import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;

public class PersonOverviewController implements Initializable{
	
	/*  Variables used for database connection */
	private DBConnection database = new DBConnection();
    private Connection connection;
    private Statement statement;
    private ResultSet resultSet;	
	
		
	@FXML
	private TableView<Person> personTable;
	@FXML
	private TableColumn<Person, String> firstNameColumn;
	@FXML
	private TableColumn<Person, String> lastNameColumn;
	@FXML
	private Label firstNameLabel;
	@FXML
	private Label lastNameLabel;
	@FXML
	private Label streetLabel;
	@FXML
	private Label postalCodeLabel;
	@FXML
	private Label cityLabel;
	@FXML
	private Label salaryLabel;

	
	/*
	 * Read from person table in database and add the first name and last name in the list
	 * personData. 
	 */
	private ObservableList<Person> getDataFromPersonAndAddToObservableList(String query){
        ObservableList<Person> personData = FXCollections.observableArrayList();
        try {

            connection = database.getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);//"SELECT * FROM person;"
            while(resultSet.next()){
            	
            	personData.add(new Person(
            			resultSet.getString("dbpersonID"),
                        resultSet.getString("dbfirstName"),                        
                        resultSet.getString("dblastName"),
                        resultSet.getString("dbstreet"),
                        resultSet.getString("dbpostalCode"),
                        resultSet.getString("dbcity"),
                        resultSet.getString("salary")
                ));
              }
            connection.close();
            statement.close();
            resultSet.close();
        } catch (SQLException e) {
            e.printStackTrace();
            
        }
        return personData;
    }
	
	
	
	 /**
     * Fills all text fields to show details about the person.
     * If the specified person is null, all text fields are cleared.
     * 
     * @param person the person or null
     */
    private void showPersonDetails(Person person) {
        if (person != null) {
            // Fill the labels with info from the person object.
            firstNameLabel.setText(person.getFirstName());
            lastNameLabel.setText(person.getLastName());
            streetLabel.setText(person.getStreet());
            postalCodeLabel.setText(Integer.toString(person.getPostalCode()));
            cityLabel.setText(person.getCity());
            salaryLabel.setText(Double.toString(person.getSalary()));

            // TODO: We need a way to convert the birthday into a String! 
            // birthdayLabel.setText(...);
        } else {
            // Person is null, remove all the text.
            firstNameLabel.setText("");
            lastNameLabel.setText("");
            streetLabel.setText("");
            postalCodeLabel.setText("");
            cityLabel.setText("");
            salaryLabel.setText("");
        }
    }
	
	
	
	// Event Listener on Button.onAction
	@FXML
	public void handleNewPerson(ActionEvent event) {
		
		// TODO: Please fill your code here ...
		
		
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleEditPerson(ActionEvent event) {
		// TODO Autogenerated
		Person selectedPerson = personTable.getSelectionModel().getSelectedItem();
		System.out.println(selectedPerson.getId());
        if (selectedPerson != null) {  	
        	     
        	FXMLLoader loader = new FXMLLoader(getClass().getResource("PersonEditDialog.fxml"));
        	
        	try {
				Parent root = (Parent) loader.load();
				Stage dialogStage = new Stage();
				Scene scene = new Scene(root);
				dialogStage.setScene(scene);
				dialogStage.setTitle("Edit Person");
			    dialogStage.initModality(Modality.WINDOW_MODAL);
			   
			    
			    // Set the person into the controller, i.e. show person details on the edit window
		        PersonEditDialogController controller = loader.getController();
		        controller.setDialogStage(dialogStage);
		        controller.setPerson(selectedPerson); 	
			    			    
			    dialogStage.showAndWait();
			    
			    //update the person details
			    showPersonDetails(selectedPerson);
		        
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}         
        }
        else {
            // Nothing selected.
            Alert alert = new Alert(AlertType.WARNING);
           // alert.initOwner(mainApp.getPrimaryStage());
            alert.setTitle("No Selection");
            alert.setHeaderText("No Person Selected");
            alert.setContentText("Please select a person in the table.");

            alert.showAndWait();
        }				
	}
	// Event Listener on Button.onAction
	@FXML
	public void handleDeletePerson(ActionEvent event) {
		 int selectedIndex = personTable.getSelectionModel().getSelectedIndex();
	        if (selectedIndex >= 0) {
	            personTable.getItems().remove(selectedIndex);
	            
	            Person selectedPerson = personTable.getSelectionModel().getSelectedItem();
	            try {
					DBoperation.addressBookDeleteRecordPerson(database, connection, selectedPerson);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	            
	        } else {
	            // Nothing selected.
	            Alert alert = new Alert(AlertType.WARNING);
	           // alert.initOwner(mainApp.getPrimaryStage());
	            alert.setTitle("No Selection");
	            alert.setHeaderText("No Person Selected");
	            alert.setContentText("Please select a person in the table.");

	            alert.showAndWait();
	        }
		
	}


	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		
		firstNameColumn.setCellValueFactory(new PropertyValueFactory<Person,String>("firstName"));
    	lastNameColumn.setCellValueFactory(new PropertyValueFactory<Person,String>("lastName"));    

       	ObservableList<Person> data = getDataFromPersonAndAddToObservableList("SELECT * FROM person;");
    	
    	personTable.getItems().addAll(data);	
    	
    	
    	/******* Show Person Details  *******/
    	  // Clear person details.
        showPersonDetails(null);

        // Listen for selection changes and show the person details when changed.
        personTable.getSelectionModel().selectedItemProperty().addListener(
                (observable, oldValue, newValue) -> showPersonDetails(newValue));
    	
		
	}
}
